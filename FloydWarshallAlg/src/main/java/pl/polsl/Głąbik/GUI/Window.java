/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pl.polsl.Głąbik.GUI;

import pl.polsl.Głąbik.model.*;


import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;
import javax.swing.table.*;
import javax.swing.JScrollPane;

/**
 *
 * @author Karoo
 */
public class Window extends javax.swing.JFrame {

    FloydWarshall floydWarshall;
    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        this.setTitle("Floyd-Warshall Algorithm Application"); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        t1 = new javax.swing.JTextField();
        label1 = new java.awt.Label();
        label3 = new java.awt.Label();
        t2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        l1 = new javax.swing.JList<>();
        b2 = new javax.swing.JButton();
        b1 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        b4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        t1.setToolTipText("Enter number of vertices");
        t1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t1KeyTyped(evt);
            }
        });

        label1.setText("Enter number of vertices");

        label3.setText("Enter path info");

        t2.setToolTipText("Correct pattern: starting_vertex ending_vertex cost");

        l1.setModel(new DefaultListModel<String>());
        l1.setToolTipText("List of paths provided by user");
        jScrollPane1.setViewportView(l1);

        b2.setMnemonic('a');
        b2.setText("Add");
        b2.setToolTipText("Press to add path to list");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b1.setMnemonic('v');
        b1.setText("OK");
        b1.setToolTipText("Press to submit number of vertices");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b3.setMnemonic('r');
        b3.setText("Reset");
        b3.setToolTipText("Press to reset all");
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        b4.setMnemonic('c');
        b4.setText("Calculate");
        b4.setToolTipText("Press to show results of FloydWarshall Algorithm");
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        jScrollPane2.setColumnHeaderView(null);
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setRowHeaderView(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        )
        {
            public boolean isCellEditable(int row, int column) {
                return row!=0 && column!=0 && row!=column;
            }
        }
    );
    jTable1.setToolTipText("Table of paths between vertices, provided by user");
    jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jTable1.setRowHeight(30);
    jTable1.setShowGrid(true);
    jTable1.setTableHeader(null);
    jScrollPane2.setViewportView(jTable1);

    jScrollPane3.setColumnHeaderView(null);
    jScrollPane3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    jScrollPane3.setRowHeaderView(null);

    jTable2.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {

        }
    )
    {
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    }
    );
    jTable2.setToolTipText("Table of paths after execution FloydWarshall Algorithm");
    jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jTable2.setRowHeight(30);
    jTable2.setShowGrid(true);
    jTable2.setTableHeader(null);
    jScrollPane3.setViewportView(jTable2);

    jLabel1.setText("Preview");

    jLabel2.setText("Result");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(97, 97, 97))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(105, 105, 105))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b1))
                    .addGap(20, 20, 20)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(b2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(b3)
                    .addGap(18, 18, 18)
                    .addComponent(b4)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 10, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(4, 4, 4)
                    .addComponent(jLabel2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );

    t2.getAccessibleContext().setAccessibleDescription("Correct pattern: starting_vertex ending_vertex cost");

    pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles button action Responsible for creating table with headers
     * representing vertices.
     *
     * @param evt
     */
    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        setVerticesNum();
    }//GEN-LAST:event_b1ActionPerformed

    /**
     * This method retrieves a path description from the text field `t2`, parses
     * it, and then attempts to create and add a new path to the graph. If the
     * path's start or end vertices are out of bounds or the input format is
     * incorrect, an error message is displayed. The method also checks if the
     * user has entered the number of vertices before proceeding with the path
     * input.
     *
     * @param evt
     */
    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        if (t1.isEnabled()) {
            JOptionPane.showMessageDialog(this, "Enter number of vertices first!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String pathInfo = t2.getText();
        t2.setText("");
        String[] splittedInfo = pathInfo.split(" ");
        if (splittedInfo.length != 3) {
            JOptionPane.showMessageDialog(this, "Not enougth arguments! Use format: <start> <end> <cost>", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int[] path = new int[splittedInfo.length];
        for (int i = 0; i < path.length; i++) {
            if (!isInteger(splittedInfo[i])) {
                JOptionPane.showMessageDialog(this, "Enter valid integer values!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            path[i] = Integer.parseInt(splittedInfo[i]);
        }

        Vertice start = new Vertice(path[0]);
        Vertice end = new Vertice(path[1]);
        int cost = path[2];
        //System.out.println(floydWarshall.getGraph().getVertices().size());
        if (start.id() < 1 || start.id() > floydWarshall.getGraph().getVertices().size() || end.id() < 1 || end.id() > floydWarshall.getGraph().getVertices().size()) {
            JOptionPane.showMessageDialog(this, "Enter correct vertex", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                floydWarshall.getGraph().addPath(start, end, cost);
                Path p = new Path(start, end, cost);
                ((DefaultListModel<String>) l1.getModel()).addElement(p.toString());
                displayPaths(floydWarshall.getGraph().getDist(), jTable1);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error in adding path", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_b2ActionPerformed

    /**
     * Providing enter key pressing for aproving number of vertices
     *
     * @param evt
     */
    private void t1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t1KeyTyped
        if (evt.getKeyChar() == java.awt.event.KeyEvent.VK_ENTER)
            setVerticesNum();
    }//GEN-LAST:event_t1KeyTyped

    /**
     * Handles button action responsible for reseting all of the data.
     *
     * @param evt
     */
    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
        floydWarshall.getGraph().removeAll();
        t1.setEnabled(true);
        b1.setEnabled(true);
        t1.setText("");
        t2.setText("");
        ((DefaultListModel<String>) l1.getModel()).clear();
        jTable1.setVisible(false);
        jTable2.setVisible(false);
    }//GEN-LAST:event_b3ActionPerformed

    /**
     * Method responsible for executing FloydWarshall Algorithm. After
     * initialization of a table, synchronizing data, and executing algorithm,
     * table with all of data is displayed.
     */
    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b4ActionPerformed
        try {
            initTable(jTable2, jScrollPane3, floydWarshall.getGraph().getDist().size());
            syncData();
            floydWarshall.floydWarshallAlgorithm();
            System.out.println(floydWarshall.getGraph().toString());
            displayPaths(floydWarshall.getGraph().getDist(), jTable2);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_b4ActionPerformed
    /**
     * Checks if the string entered by user is a number if so, vertices are
     * added to graph if entered string is not a number, user gets a message
     * Responsible for disabling textbox and button for vertices number
     */
    private void setVerticesNum() {
        try {
<<<<<<< HEAD
            BaseGraph graph = new Graph();
            int number = Integer.parseInt(t1.getText());
            floydWarshall = new FloydWarshall((Graph) graph, number);
=======
            Graph graph = new Graph();
            int number = Integer.parseInt(t1.getText());
            floydWarshall = new FloydWarshall(graph, number);
>>>>>>> d298b6d0eaaada2ef2cf83280113d80212c98ba5

            Vertice[] vertices = new Vertice[number];
            for (int i = 0; i < number; i++) {
                vertices[i] = new Vertice(i + 1);
                floydWarshall.getGraph().addVertice(vertices[i]);
            }
            t1.setEnabled(false);
            b1.setEnabled(false);
            initTable(jTable1, jScrollPane2, Integer.parseInt(t1.getText()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter number!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Method responsible for setting amount of rows and columns for the table/
     * Also creates a row and column headers representing vertices
     *
     * @param table table on which settings are to be applied
     * @param scrollpane scrollpane on which settings are to be applied
     * @param size number of vertices
     */
    private void initTable(javax.swing.JTable table, javax.swing.JScrollPane scrollpane, int size) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(size + 1);
        model.setColumnCount(size + 1);

        setTableSize(table, scrollpane, size);

        for (int i = 1; i <= size; i++) {
            model.setValueAt("V" + i, 0, i);
        }

        for (int i = 1; i <= size; i++) {
            model.setValueAt("V" + i, i, 0);
        }

        displayPaths(floydWarshall.getGraph().getDist(), table);
    }

    /**
     * Method responsible for setting size of every cell, that every data is
     * visible in table. If number of vertices is more than 7, cellsize is set
     * to 30, and scrollpane is enabled. If number of vertices is less than 8,
     * cellsize is scaled depending on number of vertices, and scrollpane is
     * disabled.
     *
     * @param table table on which settings are to be applied
     * @param scrollpane scrollpane on which settings are to be applied
     * @param size number of vertices
     */
    private void setTableSize(javax.swing.JTable table, javax.swing.JScrollPane scrollpane, int size) {
        int cellsize;
        if (size > 7) {
            cellsize = 30;
            scrollpane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        } else {
            cellsize = 240 / (size + 1);
            scrollpane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            scrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        }

        table.setRowHeight(cellsize);
        for (int i = 0; i < size + 1; i++) {
            table.getColumnModel().getColumn(i).setMinWidth(cellsize);
            table.getColumnModel().getColumn(i).setMaxWidth(cellsize);
        }
    }

    /**
     * Method responsible for displaying table of costs between each vertex.
     * Infinite value is represented by "INF" label
     *
     * @param costs 2d array of paths between each vertex
     * @param table table representing 2d array on the screen
     */
    private void displayPaths(List<List<Integer>> costs, javax.swing.JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        floydWarshall.initializeDistances();
        for (int col = 1; col <= costs.size(); col++) {
            for (int row = 1; row <= costs.size(); row++) {
                int cost = floydWarshall.getGraph().getDist().get(row-1).get(col-1);
                if (cost == Integer.MAX_VALUE) {
                    model.setValueAt("INF", row, col);
                } else {
                    model.setValueAt(cost, row, col);
                }
            }
        }
        table.setVisible(true);
    }

    /**
     * Method responsible for comparing 2d array of costs with graphically
     * presented table. In case user changed some cell value, value in 2d array
     * is updated.
     *
     * @throws Exception in case of wrong data provided by user. Checks if all
     * of the data is a integer value
     */
    private void syncData() throws NumberFormatException {
        for (int i = 0; i < floydWarshall.getGraph().getDist().size(); i++) {
            for (int j = 0; j < floydWarshall.getGraph().getDist().size(); j++) {
                Object cellValue = jTable1.getValueAt(i + 1, j + 1);
                int currentDist = floydWarshall.getGraph().getDist().get(i).get(j);

                if (cellValue instanceof String) {
                    String cellValueStr = (String) cellValue;

                    if (!cellValueStr.equals("INF")) {
                        try {
                            int newValue = Integer.parseInt(cellValueStr);
                            if (currentDist != newValue) {
                                floydWarshall.editDistance(i, j, newValue);
                            }
                        } catch (NumberFormatException e) {
                            throw new NumberFormatException("Invalid number format at (" + (i + 1) + "," + (j + 1) + "): " + cellValueStr);
                        }
                    }
                }
            }
        }
    }

    /**
     * @param s input string to check if it is an integer
     * @return true if value is integer, false if not
     */
    private boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JList<String> l1;
    private java.awt.Label label1;
    private java.awt.Label label3;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t2;
    // End of variables declaration//GEN-END:variables
}
